// <auto-generated />
using System;
using FlatRent.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FlatRent.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190119220626_AddTestSupplyUser")]
    partial class AddTestSupplyUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FlatRent.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FlatNumber")
                        .IsRequired();

                    b.Property<string>("HouseNumber")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FlatRent.Entities.ClientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("ClientInformations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bc9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Cool client"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.EmployeeInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("EmployeeInformations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11e88"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Department = "Supply",
                            Position = "Tiekimo Vadovas"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.Fault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClientInformationId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("EmployeeInformationId");

                    b.Property<Guid>("FlatId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<float>("Price");

                    b.Property<bool>("Repaired");

                    b.HasKey("Id");

                    b.HasIndex("ClientInformationId");

                    b.HasIndex("EmployeeInformationId");

                    b.HasIndex("FlatId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("FlatRent.Entities.Flat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AddressId");

                    b.Property<float>("Area");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Floor");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("OwnerId");

                    b.Property<float>("Price");

                    b.Property<int>("RoomCount");

                    b.Property<int>("YearOfConstruction");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("FlatRent.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("AmountPaid");

                    b.Property<float>("AmountToPay");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("PaidDate");

                    b.Property<Guid>("RentAgreementId");

                    b.HasKey("Id");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FlatRent.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Account")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("FlatRent.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("FlatId");

                    b.Property<byte[]>("PhotoBytes")
                        .IsRequired()
                        .HasMaxLength(64000);

                    b.HasKey("Id");

                    b.HasIndex("FlatId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FlatRent.Entities.RentAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClientInformationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("FlatId");

                    b.Property<DateTime>("From");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("To");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("ClientInformationId");

                    b.HasIndex("FlatId");

                    b.ToTable("RentAgreements");
                });

            modelBuilder.Entity("FlatRent.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ClientInformationId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("EmployeeInformationId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientInformationId")
                        .IsUnique();

                    b.HasIndex("EmployeeInformationId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bb4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "admin@admin.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "UhYWUG3vDiTZZt04YTqkBxL/RUxhyEvqpzCXJlRDMas=",
                            PhoneNumber = "+37060286000",
                            TypeId = new Guid("ee3d96b6-4243-4235-8231-9a9fced615fe")
                        },
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bc8"),
                            ClientInformationId = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bc9"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "client@client.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "UhYWUG3vDiTZZt04YTqkBxL/RUxhyEvqpzCXJlRDMas=",
                            PhoneNumber = "+37060286001",
                            TypeId = new Guid("ed42ea4b-9900-4477-af32-0336ca61eab1")
                        },
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11e82"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "supply@supply.com",
                            EmployeeInformationId = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11e88"),
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "UhYWUG3vDiTZZt04YTqkBxL/RUxhyEvqpzCXJlRDMas=",
                            PhoneNumber = "+37060286009",
                            TypeId = new Guid("268c6597-15cb-4ab1-9d39-8a7d7c85b3d1")
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed42ea4b-9900-4477-af32-0336ca61eab1"),
                            Name = "Client"
                        },
                        new
                        {
                            Id = new Guid("268c6597-15cb-4ab1-9d39-8a7d7c85b3d1"),
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("ee3d96b6-4243-4235-8231-9a9fced615fe"),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.Fault", b =>
                {
                    b.HasOne("FlatRent.Entities.ClientInformation", "ClientInformation")
                        .WithMany("Faults")
                        .HasForeignKey("ClientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.EmployeeInformation", "EmployeeInformation")
                        .WithMany("Faults")
                        .HasForeignKey("EmployeeInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Faults")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.Flat", b =>
                {
                    b.HasOne("FlatRent.Entities.Address", "Address")
                        .WithOne("Flat")
                        .HasForeignKey("FlatRent.Entities.Flat", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Owner", "Owner")
                        .WithMany("Flats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.Invoice", b =>
                {
                    b.HasOne("FlatRent.Entities.RentAgreement", "RentAgreement")
                        .WithMany("Invoices")
                        .HasForeignKey("RentAgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.Photo", b =>
                {
                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Photos")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.RentAgreement", b =>
                {
                    b.HasOne("FlatRent.Entities.ClientInformation", "ClientInformation")
                        .WithMany("Agreements")
                        .HasForeignKey("ClientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Agreements")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.User", b =>
                {
                    b.HasOne("FlatRent.Entities.ClientInformation", "ClientInformation")
                        .WithOne("User")
                        .HasForeignKey("FlatRent.Entities.User", "ClientInformationId");

                    b.HasOne("FlatRent.Entities.EmployeeInformation", "EmployeeInformation")
                        .WithOne("User")
                        .HasForeignKey("FlatRent.Entities.User", "EmployeeInformationId");

                    b.HasOne("FlatRent.Entities.UserType", "Type")
                        .WithMany("Users")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
