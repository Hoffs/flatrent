// <auto-generated />
using System;
using FlatRent.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlatRent.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190424171924_UpdateAttachment")]
    partial class UpdateAttachment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlatRent.Entities.FlatDetailsAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FlatNumber")
                        .IsRequired();

                    b.Property<string>("HouseNumber")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FlatRent.Entities.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Comments")
                        .HasMaxLength(65536);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("FlatId");

                    b.Property<DateTime>("From");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("StatusId");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FlatId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FlatRent.Entities.AgreementStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AgreementStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Requested"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Expired"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ended"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementId");

                    b.Property<Guid>("AuthorId");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(65536);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid?>("FaultId");

                    b.Property<Guid?>("MessageId");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FaultId");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FlatRent.Entities.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(65536);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Avatars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Bytes = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 44, 0, 0, 1, 44, 8, 3, 0, 0, 0, 78, 163, 126, 71, 0, 0, 0, 25, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 65, 100, 111, 98, 101, 32, 73, 109, 97, 103, 101, 82, 101, 97, 100, 121, 113, 201, 101, 60, 0, 0, 3, 36, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 34, 239, 187, 191, 34, 32, 105, 100, 61, 34, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101, 83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 34, 63, 62, 32, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 65, 100, 111, 98, 101, 32, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 51, 45, 99, 48, 49, 49, 32, 54, 54, 46, 49, 52, 53, 54, 54, 49, 44, 32, 50, 48, 49, 50, 47, 48, 50, 47, 48, 54, 45, 49, 52, 58, 53, 54, 58, 50, 55, 32, 32, 32, 32, 32, 32, 32, 32, 34, 62, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 34, 32, 120, 109, 108, 110, 115, 58, 115, 116, 82, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 82, 101, 102, 35, 34, 32, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 61, 34, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 67, 83, 54, 32, 40, 77, 97, 99, 105, 110, 116, 111, 115, 104, 41, 34, 32, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 69, 55, 56, 52, 49, 54, 70, 69, 49, 55, 51, 69, 49, 49, 69, 51, 57, 54, 50, 56, 65, 56, 66, 67, 54, 57, 69, 70, 56, 55, 66, 55, 34, 32, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 69, 55, 56, 52, 49, 54, 70, 70, 49, 55, 51, 69, 49, 49, 69, 51, 57, 54, 50, 56, 65, 56, 66, 67, 54, 57, 69, 70, 56, 55, 66, 55, 34, 62, 32, 60, 120, 109, 112, 77, 77, 58, 68, 101, 114, 105, 118, 101, 100, 70, 114, 111, 109, 32, 115, 116, 82, 101, 102, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 69, 55, 56, 52, 49, 54, 70, 67, 49, 55, 51, 69, 49, 49, 69, 51, 57, 54, 50, 56, 65, 56, 66, 67, 54, 57, 69, 70, 56, 55, 66, 55, 34, 32, 115, 116, 82, 101, 102, 58, 100, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 69, 55, 56, 52, 49, 54, 70, 68, 49, 55, 51, 69, 49, 49, 69, 51, 57, 54, 50, 56, 65, 56, 66, 67, 54, 57, 69, 70, 56, 55, 66, 55, 34, 47, 62, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 32, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 32, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 101, 110, 100, 61, 34, 114, 34, 63, 62, 111, 147, 111, 79, 0, 0, 0, 51, 80, 76, 84, 69, 222, 222, 222, 234, 234, 234, 252, 252, 252, 244, 244, 244, 214, 214, 214, 228, 228, 228, 247, 247, 247, 220, 220, 220, 250, 250, 250, 217, 217, 217, 239, 239, 239, 236, 236, 236, 231, 231, 231, 242, 242, 242, 225, 225, 225, 211, 211, 211, 255, 255, 255, 180, 92, 247, 87, 0, 0, 6, 196, 73, 68, 65, 84, 120, 218, 236, 221, 233, 118, 221, 42, 12, 6, 80, 38, 131, 141, 7, 252, 254, 79, 123, 219, 219, 174, 116, 181, 199, 73, 142, 25, 132, 37, 62, 253, 110, 218, 122, 7, 176, 204, 36, 117, 34, 222, 14, 5, 2, 96, 1, 11, 88, 192, 2, 22, 176, 64, 0, 44, 96, 1, 11, 88, 192, 2, 22, 8, 128, 5, 44, 96, 1, 11, 88, 192, 2, 1, 176, 128, 5, 44, 96, 1, 11, 88, 32, 0, 22, 176, 128, 5, 44, 96, 1, 11, 4, 192, 2, 22, 176, 128, 5, 44, 96, 129, 0, 88, 192, 2, 22, 176, 114, 195, 88, 171, 63, 34, 218, 25, 88, 215, 49, 199, 77, 185, 244, 111, 132, 105, 181, 192, 250, 59, 246, 105, 73, 159, 199, 177, 206, 192, 250, 144, 114, 233, 187, 8, 79, 240, 234, 142, 53, 235, 37, 189, 23, 135, 29, 28, 107, 158, 210, 141, 88, 226, 192, 88, 247, 168, 250, 115, 117, 196, 50, 91, 202, 8, 101, 71, 196, 218, 93, 202, 139, 201, 140, 134, 101, 142, 148, 29, 110, 31, 11, 43, 187, 89, 117, 109, 92, 125, 176, 182, 84, 24, 193, 143, 130, 101, 84, 42, 142, 46, 93, 177, 3, 150, 15, 169, 70, 196, 17, 176, 188, 75, 117, 98, 146, 143, 85, 205, 170, 131, 150, 226, 107, 69, 175, 165, 24, 91, 145, 107, 41, 206, 86, 41, 105, 185, 88, 38, 164, 218, 17, 197, 98, 169, 234, 86, 201, 121, 161, 88, 58, 53, 136, 197, 136, 196, 178, 169, 73, 28, 18, 177, 140, 107, 131, 149, 86, 129, 88, 71, 35, 171, 228, 102, 113, 88, 123, 106, 22, 74, 26, 150, 89, 218, 97, 165, 93, 24, 150, 110, 104, 69, 246, 70, 84, 204, 71, 119, 210, 68, 158, 8, 107, 106, 106, 149, 156, 17, 132, 53, 167, 198, 161, 5, 97, 109, 173, 177, 104, 154, 150, 18, 48, 98, 145, 101, 166, 36, 88, 107, 115, 171, 180, 136, 193, 90, 218, 99, 37, 43, 4, 203, 19, 88, 145, 76, 154, 42, 9, 195, 59, 213, 16, 175, 132, 244, 66, 146, 111, 30, 37, 164, 23, 146, 244, 67, 2, 44, 77, 131, 229, 68, 96, 41, 26, 172, 228, 37, 96, 17, 89, 17, 228, 165, 237, 177, 44, 21, 214, 33, 0, 75, 83, 97, 45, 2, 176, 14, 42, 172, 100, 248, 99, 5, 50, 44, 203, 31, 139, 204, 170, 253, 8, 223, 28, 203, 208, 97, 105, 246, 88, 150, 14, 107, 2, 214, 131, 214, 15, 155, 255, 3, 17, 88, 15, 76, 179, 128, 117, 47, 128, 5, 44, 96, 1, 11, 3, 60, 33, 214, 10, 44, 36, 165, 220, 177, 14, 246, 88, 51, 29, 22, 255, 15, 105, 76, 209, 96, 242, 15, 211, 202, 3, 45, 88, 180, 95, 101, 21, 180, 20, 166, 4, 96, 25, 49, 47, 67, 138, 21, 233, 32, 101, 124, 167, 192, 218, 164, 12, 89, 20, 88, 86, 72, 254, 78, 179, 153, 205, 145, 96, 69, 25, 88, 147, 140, 44, 139, 6, 107, 23, 210, 11, 229, 108, 237, 222, 165, 96, 17, 36, 241, 114, 14, 13, 204, 18, 50, 82, 42, 44, 130, 33, 94, 206, 65, 167, 246, 77, 139, 230, 82, 26, 25, 135, 51, 211, 44, 9, 171, 113, 211, 218, 78, 73, 88, 109, 63, 16, 157, 172, 3, 229, 109, 207, 103, 82, 221, 25, 66, 118, 129, 68, 195, 125, 90, 225, 148, 134, 213, 240, 84, 138, 151, 135, 53, 59, 206, 249, 40, 49, 86, 171, 142, 24, 78, 137, 88, 109, 146, 45, 55, 203, 196, 50, 45, 102, 227, 41, 175, 13, 38, 189, 243, 175, 193, 176, 181, 158, 82, 177, 234, 95, 189, 73, 123, 81, 41, 241, 165, 174, 145, 179, 21, 249, 117, 193, 85, 181, 130, 145, 141, 85, 83, 139, 218, 170, 195, 21, 231, 145, 105, 31, 60, 251, 92, 158, 239, 152, 90, 117, 41, 203, 80, 165, 212, 192, 122, 142, 129, 85, 84, 71, 230, 119, 222, 222, 165, 84, 81, 167, 82, 50, 133, 187, 227, 149, 200, 82, 50, 198, 254, 44, 133, 121, 81, 110, 175, 164, 43, 186, 215, 46, 104, 226, 207, 66, 155, 214, 115, 197, 242, 235, 244, 7, 100, 122, 229, 202, 94, 121, 85, 175, 127, 215, 250, 241, 206, 88, 148, 222, 13, 47, 44, 19, 95, 234, 59, 190, 206, 58, 205, 89, 35, 215, 69, 29, 58, 251, 111, 43, 109, 85, 57, 178, 5, 150, 191, 172, 132, 121, 81, 132, 201, 222, 158, 61, 117, 250, 165, 217, 92, 23, 179, 11, 145, 5, 214, 231, 2, 250, 44, 228, 186, 160, 58, 237, 114, 227, 15, 63, 12, 203, 127, 245, 244, 87, 21, 190, 236, 219, 83, 130, 33, 190, 62, 253, 151, 53, 18, 221, 250, 104, 172, 111, 235, 59, 94, 253, 182, 205, 250, 198, 155, 209, 77, 87, 111, 58, 251, 205, 102, 166, 96, 159, 139, 101, 191, 223, 136, 181, 92, 254, 247, 231, 245, 203, 238, 184, 108, 151, 243, 161, 230, 141, 70, 169, 159, 138, 245, 94, 50, 112, 124, 50, 148, 88, 173, 174, 172, 213, 22, 63, 121, 181, 197, 183, 190, 49, 195, 252, 68, 44, 51, 229, 231, 148, 127, 196, 118, 173, 39, 245, 43, 126, 36, 179, 95, 212, 115, 247, 239, 190, 26, 42, 22, 155, 169, 134, 117, 103, 53, 98, 41, 30, 74, 238, 212, 9, 118, 241, 105, 88, 55, 87, 110, 202, 106, 246, 26, 125, 111, 150, 39, 62, 11, 235, 254, 42, 87, 62, 215, 93, 170, 122, 90, 170, 147, 85, 54, 87, 6, 85, 181, 213, 197, 58, 88, 153, 243, 83, 247, 191, 73, 124, 230, 170, 118, 157, 81, 190, 10, 86, 254, 78, 53, 183, 221, 120, 179, 155, 152, 191, 19, 167, 74, 1, 149, 26, 88, 101, 39, 40, 222, 157, 34, 216, 167, 162, 185, 123, 245, 12, 172, 242, 69, 249, 160, 253, 237, 41, 159, 30, 59, 147, 42, 96, 85, 217, 165, 230, 14, 109, 175, 123, 138, 143, 91, 157, 13, 37, 254, 1, 88, 21, 47, 155, 89, 126, 100, 237, 214, 254, 70, 243, 214, 174, 250, 168, 184, 95, 48, 244, 199, 154, 105, 78, 19, 62, 98, 139, 96, 49, 214, 193, 198, 170, 124, 223, 91, 41, 150, 77, 140, 226, 232, 140, 165, 56, 97, 149, 30, 208, 47, 196, 138, 172, 172, 74, 147, 173, 194, 31, 95, 120, 97, 21, 54, 173, 50, 172, 157, 153, 85, 97, 211, 82, 3, 141, 88, 197, 77, 75, 13, 243, 42, 172, 176, 171, 171, 8, 107, 226, 135, 85, 116, 140, 179, 4, 203, 48, 180, 42, 74, 227, 75, 176, 86, 142, 88, 75, 39, 172, 133, 35, 86, 201, 12, 115, 1, 150, 103, 105, 85, 50, 196, 23, 96, 109, 60, 177, 92, 23, 44, 158, 189, 176, 164, 31, 170, 209, 122, 97, 73, 63, 84, 163, 245, 194, 146, 126, 152, 143, 21, 184, 98, 229, 127, 242, 100, 99, 205, 108, 173, 242, 239, 23, 201, 198, 138, 124, 177, 2, 57, 214, 193, 23, 43, 251, 251, 48, 27, 203, 49, 198, 138, 196, 88, 158, 177, 85, 118, 242, 144, 139, 181, 114, 198, 10, 196, 88, 19, 103, 172, 220, 75, 239, 114, 177, 22, 214, 88, 150, 20, 203, 176, 182, 202, 157, 1, 204, 196, 178, 188, 177, 14, 82, 44, 205, 27, 107, 33, 197, 226, 61, 190, 231, 142, 240, 153, 88, 129, 57, 150, 165, 196, 98, 110, 149, 121, 209, 65, 30, 150, 231, 142, 181, 17, 98, 89, 238, 88, 138, 16, 75, 115, 199, 90, 8, 177, 54, 238, 88, 137, 16, 75, 177, 199, 242, 116, 88, 129, 61, 150, 165, 195, 98, 111, 149, 151, 59, 140, 138, 165, 201, 176, 44, 127, 172, 13, 88, 141, 19, 173, 172, 31, 138, 192, 26, 40, 39, 205, 92, 195, 31, 21, 43, 145, 97, 77, 192, 26, 41, 129, 207, 91, 149, 30, 22, 203, 2, 235, 129, 88, 11, 176, 70, 250, 218, 1, 86, 243, 47, 233, 97, 177, 52, 176, 128, 5, 44, 96, 1, 11, 88, 192, 34, 194, 154, 129, 133, 150, 5, 44, 96, 1, 75, 40, 150, 19, 128, 133, 201, 191, 39, 98, 97, 193, 2, 235, 134, 88, 190, 255, 36, 232, 86, 164, 13, 127, 44, 186, 93, 52, 2, 86, 44, 8, 55, 179, 97, 79, 233, 141, 216, 185, 91, 29, 132, 88, 236, 211, 210, 72, 137, 197, 60, 211, 114, 164, 7, 157, 152, 159, 71, 201, 60, 81, 158, 123, 236, 151, 247, 23, 207, 76, 139, 197, 58, 47, 205, 110, 33, 231, 128, 77, 203, 83, 99, 249, 225, 70, 172, 49, 239, 207, 50, 244, 88, 6, 215, 216, 201, 239, 136, 125, 110, 147, 228, 121, 118, 32, 152, 62, 88, 28, 135, 173, 162, 202, 78, 101, 87, 156, 179, 251, 234, 41, 171, 25, 86, 88, 105, 128, 153, 86, 40, 43, 84, 84, 90, 240, 99, 29, 101, 188, 170, 129, 117, 90, 62, 179, 53, 91, 233, 179, 150, 151, 191, 50, 76, 174, 74, 116, 229, 5, 33, 171, 148, 236, 227, 144, 158, 110, 21, 10, 28, 86, 41, 6, 153, 87, 250, 147, 52, 19, 173, 82, 77, 186, 86, 1, 219, 248, 224, 214, 229, 166, 74, 133, 183, 235, 21, 221, 246, 211, 51, 189, 142, 104, 106, 61, 98, 205, 114, 238, 167, 215, 234, 89, 253, 49, 108, 187, 169, 248, 124, 85, 177, 254, 223, 112, 106, 181, 62, 84, 255, 216, 244, 110, 107, 63, 91, 117, 44, 201, 1, 44, 96, 1, 11, 88, 192, 2, 22, 2, 88, 192, 2, 22, 176, 128, 5, 44, 4, 176, 128, 5, 44, 96, 1, 11, 88, 8, 96, 1, 11, 88, 192, 2, 22, 176, 16, 192, 2, 22, 176, 128, 5, 44, 96, 33, 128, 5, 44, 96, 1, 11, 88, 192, 66, 0, 11, 88, 192, 2, 22, 176, 128, 133, 0, 214, 141, 248, 79, 128, 1, 0, 134, 174, 101, 80, 68, 224, 156, 192, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 },
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            MimeType = "image/png",
                            Name = "avatar.png"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementId");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("FaultId");

                    b.Property<Guid>("FlatId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("RecipientId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FaultId");

                    b.HasIndex("FlatId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("FlatRent.Entities.Fault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementId");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("FlatId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<float>("Price");

                    b.Property<bool>("Repaired");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FlatId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("FlatRent.Entities.Flat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<float>("Area");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Features");

                    b.Property<int>("Floor");

                    b.Property<bool>("IsFurnished");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("MinimumRentDays");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<float>("Price");

                    b.Property<int>("RoomCount");

                    b.Property<string>("TenantRequirements")
                        .IsRequired();

                    b.Property<int>("TotalFloors");

                    b.Property<int>("YearOfConstruction");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AuthorId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("FlatRent.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(65536);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("FlatId");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FlatId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FlatRent.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementId");

                    b.Property<float>("AmountPaid");

                    b.Property<float>("AmountToPay");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("PaidDate");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FlatRent.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<Guid>("ConversationId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FlatRent.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(64000);

                    b.Property<Guid>("AvatarId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000001"));

                    b.Property<string>("BankAccount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bb4"),
                            AvatarId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "admin@admin.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "UhYWUG3vDiTZZt04YTqkBxL/RUxhyEvqpzCXJlRDMas=",
                            PhoneNumber = "+37060286000",
                            TypeId = 1
                        },
                        new
                        {
                            Id = new Guid("b2c9ecb2-eda6-4b0f-9236-ef0583f11bc8"),
                            AvatarId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "client@client.com",
                            FirstName = "Test",
                            LastName = "Test",
                            Password = "UhYWUG3vDiTZZt04YTqkBxL/RUxhyEvqpzCXJlRDMas=",
                            PhoneNumber = "+37060286001",
                            TypeId = 2
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("FlatRent.Entities.FlatDetailsAddress", b =>
                {
                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.Agreement", b =>
                {
                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Agreements")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.AgreementStatus", "Status")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.User", "Tenant")
                        .WithMany("TenantAgreements")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Attachment", b =>
                {
                    b.HasOne("FlatRent.Entities.Agreement", "Agreement")
                        .WithMany("Attachments")
                        .HasForeignKey("AgreementId");

                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Fault", "Fault")
                        .WithMany()
                        .HasForeignKey("FaultId");

                    b.HasOne("FlatRent.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Conversation", b =>
                {
                    b.HasOne("FlatRent.Entities.Agreement", "AssociatedAgreement")
                        .WithMany("Conversations")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany("StartedConversations")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.Fault", "AssociatedFault")
                        .WithMany("Conversations")
                        .HasForeignKey("FaultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.Flat", "AssociatedFlat")
                        .WithMany("Conversations")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.User", "Recipient")
                        .WithMany("RecipientConversations")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Fault", b =>
                {
                    b.HasOne("FlatRent.Entities.Agreement", "Agreement")
                        .WithMany("Faults")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany("RegisteredFaults")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Faults")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Flat", b =>
                {
                    b.HasOne("FlatRent.Entities.FlatDetailsAddress", "FlatDetailsAddress")
                        .WithOne("Flat")
                        .HasForeignKey("FlatRent.Entities.Flat", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany("Flats")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Image", b =>
                {
                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Flat", "Flat")
                        .WithMany("Images")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FlatRent.Entities.Invoice", b =>
                {
                    b.HasOne("FlatRent.Entities.Agreement", "Agreement")
                        .WithMany("Invoices")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.Message", b =>
                {
                    b.HasOne("FlatRent.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FlatRent.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FlatRent.Entities.User", b =>
                {
                    b.HasOne("FlatRent.Entities.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlatRent.Entities.UserType", "Type")
                        .WithMany("Users")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
